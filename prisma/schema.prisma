generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  STUDENT
  FACULTY
}

enum Gender {
  MALE
  FEMALE
}

enum VehicleType {
  FOUR_WHEEL
  TWO_WHEEL
  THREE_WHEEL
  HEAVY
}

model DefaultImage {
  id String @id @default(uuid())
  imageUrl String
}

model Review {
  id         String @id @default(uuid())
  rating     Int
  
  user       User   @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  
  reviewer   User   @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId String
}


model Complain {
  id           String   @id @default(uuid())
  complainer   User     @relation("ComplainerRelation", fields: [complainerId], references: [id], onDelete: Cascade)
  complainerId String
  complain     String
  target       User     @relation("TargetRelation", fields: [targetId], references: [id])
  targetId     String
  createdAt    DateTime @default(now())
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  username String  @unique
  fullname String
  password String
  gender   Gender  @default(MALE)
  driver   Boolean @default(false)
  warnings Int     @default(0)

  profilePic     String?
  isSuspended    Boolean    @default(false)
  type           Type       @default(STUDENT)
  isAdmin        Boolean    @default(false)
  phone          String?
  rating         Float      @default(0.0)
  complaintsMade Complain[] @relation("ComplainerRelation")
  complains      Complain[] @relation("TargetRelation")
  reviews Review[]  @relation("UserReviews")  // This connects to Review's user field
  reviewsWritten Review[] @relation("ReviewerReviews")

  conversations    Conversation[]
  notifications    Notification[]        @relation("UserNotifications")
  notifiers        Notification[]        @relation("NotifierNotifications")
  messages         Message[]
  vehicles         Vehicle?
  ridesAsPassenger RealTimeCarpoolRide[] @relation("PassengerRides")
  ridesAsDriver    RealTimeCarpoolRide[] @relation("DriverRides")

  postAsPassenger CarpoolRequestPost[] @relation("PassengerPosts")
  postAsDriver    CarpoolRequestPost[] @relation("DriverPosts")

  // isVerified                    Boolean   @default(false)
  // verificationToken             String?
  // verificationTokenExpiresAt    DateTime?
}

model Message {
  id             String       @id @default(uuid())
  message        String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  clean Boolean @default(false)
  seen           Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  createdAt      DateTime     @default(now())
  editedAt       DateTime     @updatedAt
}

model Conversation {
  id       String    @id @default(uuid())
  name     String
  users    User[]
  messages Message[]
}

model Vehicle {
  id          String      @id @default(uuid())
  type        VehicleType @default(FOUR_WHEEL)
  name        String
  numberPlate String
  model       String
  color       String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique
  vehiclePics String
}

model RealTimeCarpoolRide {
  id           String   @id @default(uuid())
  pickLocation String
  dropLocation String
  time         DateTime @default(now())
  cost         Int
  isAccpted    Boolean  @default(false)

  passenger   User   @relation("PassengerRides", fields: [passengerId], references: [id], onDelete: Cascade)
  passengerId String

  driver   User?  @relation("DriverRides", fields: [driverId], references: [id], onDelete: Cascade)
  driverId String
}

model CarpoolRequestPost {
  id            String   @id @default(uuid())
  poster        User     @relation("PassengerPosts", fields: [posterId], references: [id], onDelete: Cascade)
  posterId      String
  otherUser     User?    @relation("DriverPosts", fields: [otherId], references: [id], onDelete: Cascade)
  otherId       String?
  time          DateTime @default(now()) @updatedAt
  pickLocation  String
  pickCordinate Int[]    @default([])
  dropCordinate Int[]    @default([])
  dropLocation  String
  isAccepted    Boolean  @default(false)
  isSuccessful  Boolean  @default(false)
  caption       String
  cost          Float
  departureTime String
  seats         Int      @default(1)
}

model Notification {
  id         String   @id @default(uuid())
  time       DateTime @default(now())
  message    String
  read       Boolean  @default(false)
  userId     String
  user       User     @relation("UserNotifications", fields: [userId], references: [id])
  notifierId String
  notifier   User     @relation("NotifierNotifications", fields: [notifierId], references: [id])
}

model EmailVerification {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}